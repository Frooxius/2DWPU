--alt_u_div DEVICE_FAMILY="Cyclone IV E" LPM_PIPELINE=0 MAXIMIZE_SPEED=5 SKIP_BITS=0 WIDTH_D=3 WIDTH_N=5 WIDTH_Q=5 WIDTH_R=3 denominator numerator quotient remainder
--VERSION_BEGIN 11.1SP2 cbx_cycloneii 2012:01:25:21:13:53:SJ cbx_lpm_abs 2012:01:25:21:13:53:SJ cbx_lpm_add_sub 2012:01:25:21:13:53:SJ cbx_lpm_divide 2012:01:25:21:13:53:SJ cbx_mgl 2012:01:25:21:15:41:SJ cbx_stratix 2012:01:25:21:13:53:SJ cbx_stratixii 2012:01:25:21:13:53:SJ cbx_util_mgl 2012:01:25:21:13:53:SJ  VERSION_END


-- Copyright (C) 1991-2011 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION add_sub_7pc (dataa[0..0], datab[0..0])
RETURNS ( cout, result[0..0]);
FUNCTION add_sub_8pc (dataa[1..0], datab[1..0])
RETURNS ( cout, result[1..0]);

--synthesis_resources = lut 14 
SUBDESIGN alt_u_div_24f
( 
	denominator[2..0]	:	input;
	numerator[4..0]	:	input;
	quotient[4..0]	:	output;
	remainder[2..0]	:	output;
) 
VARIABLE 
	add_sub_0 : add_sub_7pc;
	add_sub_1 : add_sub_8pc;
	add_sub_2_result_int[3..0]	:	WIRE;
	add_sub_2_cout	:	WIRE;
	add_sub_2_dataa[2..0]	:	WIRE;
	add_sub_2_datab[2..0]	:	WIRE;
	add_sub_2_result[2..0]	:	WIRE;
	add_sub_3_result_int[4..0]	:	WIRE;
	add_sub_3_cout	:	WIRE;
	add_sub_3_dataa[3..0]	:	WIRE;
	add_sub_3_datab[3..0]	:	WIRE;
	add_sub_3_result[3..0]	:	WIRE;
	add_sub_4_result_int[4..0]	:	WIRE;
	add_sub_4_cout	:	WIRE;
	add_sub_4_dataa[3..0]	:	WIRE;
	add_sub_4_datab[3..0]	:	WIRE;
	add_sub_4_result[3..0]	:	WIRE;
	DenominatorIn[23..0]	: WIRE;
	DenominatorIn_tmp[23..0]	: WIRE;
	gnd_wire	: WIRE;
	nose[29..0]	: WIRE;
	NumeratorIn[29..0]	: WIRE;
	NumeratorIn_tmp[29..0]	: WIRE;
	prestg[19..0]	: WIRE;
	quotient_tmp[4..0]	: WIRE;
	sel[17..0]	: WIRE;
	selnose[29..0]	: WIRE;
	StageIn[23..0]	: WIRE;
	StageIn_tmp[23..0]	: WIRE;
	StageOut[19..0]	: WIRE;

BEGIN 
	add_sub_0.dataa[0..0] = NumeratorIn[4..4];
	add_sub_0.datab[0..0] = DenominatorIn[0..0];
	add_sub_1.dataa[] = ( StageIn[4..4], NumeratorIn[8..8]);
	add_sub_1.datab[1..0] = DenominatorIn[5..4];
	add_sub_2_result_int[] = (0, add_sub_2_dataa[]) - (0, add_sub_2_datab[]);
	add_sub_2_result[] = add_sub_2_result_int[2..0];
	add_sub_2_cout = !add_sub_2_result_int[3];
	add_sub_2_dataa[] = ( StageIn[9..8], NumeratorIn[12..12]);
	add_sub_2_datab[] = DenominatorIn[10..8];
	add_sub_3_result_int[] = (0, add_sub_3_dataa[]) - (0, add_sub_3_datab[]);
	add_sub_3_result[] = add_sub_3_result_int[3..0];
	add_sub_3_cout = !add_sub_3_result_int[4];
	add_sub_3_dataa[] = ( StageIn[14..12], NumeratorIn[16..16]);
	add_sub_3_datab[] = DenominatorIn[15..12];
	add_sub_4_result_int[] = (0, add_sub_4_dataa[]) - (0, add_sub_4_datab[]);
	add_sub_4_result[] = add_sub_4_result_int[3..0];
	add_sub_4_cout = !add_sub_4_result_int[4];
	add_sub_4_dataa[] = ( StageIn[18..16], NumeratorIn[20..20]);
	add_sub_4_datab[] = DenominatorIn[19..16];
	DenominatorIn[] = DenominatorIn_tmp[];
	DenominatorIn_tmp[] = ( DenominatorIn[19..0], ( gnd_wire, denominator[]));
	gnd_wire = B"0";
	nose[] = ( B"00000", add_sub_4_cout, B"00000", add_sub_3_cout, B"00000", add_sub_2_cout, B"00000", add_sub_1.cout, B"00000", add_sub_0.cout);
	NumeratorIn[] = NumeratorIn_tmp[];
	NumeratorIn_tmp[] = ( NumeratorIn[24..0], numerator[]);
	prestg[] = ( add_sub_4_result[], add_sub_3_result[], GND, add_sub_2_result[], B"00", add_sub_1.result[], B"000", add_sub_0.result[]);
	quotient[] = quotient_tmp[];
	quotient_tmp[] = ( (! selnose[0..0]), (! selnose[6..6]), (! selnose[12..12]), (! selnose[18..18]), (! selnose[24..24]));
	remainder[2..0] = StageIn[22..20];
	sel[] = ( gnd_wire, (sel[17..17] # DenominatorIn[22..22]), (sel[16..16] # DenominatorIn[21..21]), gnd_wire, (sel[14..14] # DenominatorIn[18..18]), (sel[13..13] # DenominatorIn[17..17]), gnd_wire, (sel[11..11] # DenominatorIn[14..14]), (sel[10..10] # DenominatorIn[13..13]), gnd_wire, (sel[8..8] # DenominatorIn[10..10]), (sel[7..7] # DenominatorIn[9..9]), gnd_wire, (sel[5..5] # DenominatorIn[6..6]), (sel[4..4] # DenominatorIn[5..5]), gnd_wire, (sel[2..2] # DenominatorIn[2..2]), (sel[1..1] # DenominatorIn[1..1]));
	selnose[] = ( (! nose[29..29]), (! nose[28..28]), ((! nose[27..27]) # sel[17..17]), ((! nose[26..26]) # sel[16..16]), ((! nose[25..25]) # sel[15..15]), (! nose[24..24]), (! nose[23..23]), ((! nose[22..22]) # sel[14..14]), ((! nose[21..21]) # sel[13..13]), ((! nose[20..20]) # sel[12..12]), (! nose[19..19]), (! nose[18..18]), ((! nose[17..17]) # sel[11..11]), ((! nose[16..16]) # sel[10..10]), ((! nose[15..15]) # sel[9..9]), (! nose[14..14]), (! nose[13..13]), ((! nose[12..12]) # sel[8..8]), ((! nose[11..11]) # sel[7..7]), ((! nose[10..10]) # sel[6..6]), (! nose[9..9]), (! nose[8..8]), ((! nose[7..7]) # sel[5..5]), ((! nose[6..6]) # sel[4..4]), ((! nose[5..5]) # sel[3..3]), (! nose[4..4]), (! nose[3..3]), ((! nose[2..2]) # sel[2..2]), ((! nose[1..1]) # sel[1..1]), ((! nose[0..0]) # sel[0..0]));
	StageIn[] = StageIn_tmp[];
	StageIn_tmp[] = ( StageOut[19..0], B"0000");
	StageOut[] = ( ((( StageIn[18..16], NumeratorIn[20..20]) & selnose[24..24]) # (prestg[19..16] & (! selnose[24..24]))), ((( StageIn[14..12], NumeratorIn[16..16]) & selnose[18..18]) # (prestg[15..12] & (! selnose[18..18]))), ((( StageIn[10..8], NumeratorIn[12..12]) & selnose[12..12]) # (prestg[11..8] & (! selnose[12..12]))), ((( StageIn[6..4], NumeratorIn[8..8]) & selnose[6..6]) # (prestg[7..4] & (! selnose[6..6]))), ((( StageIn[2..0], NumeratorIn[4..4]) & selnose[0..0]) # (prestg[3..0] & (! selnose[0..0]))));
END;
--VALID FILE
